"use strict";(self.webpackChunkSelcukes=self.webpackChunkSelcukes||[]).push([[2979],{5222:(e,a,s)=>{s.r(a),s.d(a,{assets:()=>d,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"data-bind/data-mapper","title":"DataMapper","description":"DataMapper object helps to read and write Json, xml or yaml/yml files with @DataFile annotation.","source":"@site/docs/07_data-bind/data-mapper.md","sourceDirName":"07_data-bind","slug":"/data-bind/data-mapper","permalink":"/docs/data-bind/data-mapper","draft":false,"unlisted":false,"editUrl":"https://github.com/selcukes/selcukes.github.io/tree/main/docs/07_data-bind/data-mapper.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"id":"data-mapper","title":"DataMapper","sidebar_position":2},"sidebar":"defaultSidebar","previous":{"title":"Introduction","permalink":"/docs/data-bind/data-bind-setup"},"next":{"title":"ExcelMapper","permalink":"/docs/data-bind/excel-mapper"}}');var n=s(4848),r=s(8453);const i={id:"data-mapper",title:"DataMapper",sidebar_position:2},l=void 0,d={},c=[{value:"DataFile Lookup Strategy",id:"datafile-lookup-strategy",level:3},{value:"Read data files",id:"read-data-files",level:3},{value:"Update data files",id:"update-data-files",level:3},{value:"Write data files",id:"write-data-files",level:3}];function o(e){const a={admonition:"admonition",code:"code",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(a.p,{children:["DataMapper object helps to read and write Json, xml or yaml/yml files with ",(0,n.jsx)(a.code,{children:"@DataFile"})," annotation."]}),"\n",(0,n.jsx)(a.h3,{id:"datafile-lookup-strategy",children:"DataFile Lookup Strategy"}),"\n",(0,n.jsxs)(a.p,{children:["The ",(0,n.jsx)(a.code,{children:"DataMapper"})," uses a specific strategy to locate the appropriate data files in the test resource folder. This\nstrategy is based on converting the POJO class name to a SnakeCase JSON or YAML/YML file."]}),"\n",(0,n.jsxs)(a.p,{children:["For example, for the POJO class ",(0,n.jsx)(a.code,{children:"TestUsers.java"}),", the matching test data files would be ",(0,n.jsx)(a.code,{children:"test_users.json"}),", ",(0,n.jsx)(a.code,{children:"test_users.xml"}),",\n",(0,n.jsx)(a.code,{children:"test_users.yml"}),", or ",(0,n.jsx)(a.code,{children:"test_users.yaml"})]}),"\n",(0,n.jsxs)(a.p,{children:[(0,n.jsx)(a.code,{children:"@DataFile"})," annotation also takes additional attributes as follows"]}),"\n",(0,n.jsxs)(a.ul,{children:["\n",(0,n.jsxs)(a.li,{children:["fileName: This attribute allows you to specify a custom data file name, such as ",(0,n.jsx)(a.code,{children:"sample_data.json"})]}),"\n",(0,n.jsxs)(a.li,{children:["filePath: This attribute is used to specify the path where the data file is located, such as ",(0,n.jsx)(a.code,{children:"src/main/resources"}),"."]}),"\n",(0,n.jsxs)(a.li,{children:["streamLoader: This attribute is set to false by default. If set to true, the DataMapper loads data files from the\nclass loader, which allows for reading from a JAR file.","\n",(0,n.jsx)(a.admonition,{type:"note",children:(0,n.jsxs)(a.p,{children:["If you enable ",(0,n.jsx)(a.code,{children:"streamLoader"}),", then the ",(0,n.jsx)(a.code,{children:"fileName"})," attribute is mandatory."]})}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(a.h3,{id:"read-data-files",children:"Read data files"}),"\n",(0,n.jsxs)(a.p,{children:["To illustrate how to read data files using the DataMapper object, let's consider the ",(0,n.jsx)(a.code,{children:"test_users.json"})," file below:"]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-json",children:'{\n  "users": [\n    {\n      "username": "MyName",\n      "password": "things"\n    },\n    {\n      "username": "TestName",\n      "password": "eggs"\n    }\n  ]\n}\n'})}),"\n",(0,n.jsxs)(a.p,{children:["First, we define a POJO class with the ",(0,n.jsx)(a.code,{children:"@DataFile"})," annotation:"]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-java",children:"\n@Data\n@DataFile\nstatic class TestUsers {\n    List<User> users;\n}\n"})}),"\n",(0,n.jsx)(a.p,{children:"Then, we create our User class:"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-java",children:"\n@Data\nstatic class User {\n    private String username;\n    private String password;\n\n}\n"})}),"\n",(0,n.jsxs)(a.p,{children:["To read the ",(0,n.jsx)(a.code,{children:"test_users.json"})," file into a TestUsers object using DataMapper, we use the following code:"]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-java",children:"final TestUsers testUsers = DataMapper.parse(TestUsers.class);\n"})}),"\n",(0,n.jsxs)(a.p,{children:["Our ",(0,n.jsx)(a.code,{children:"TestUsers"})," object is now populated with the data from the file, including the list of User."]}),"\n",(0,n.jsxs)(a.p,{children:["The following code demonstrates a full example of how to parse and read the ",(0,n.jsx)(a.code,{children:"test_users.json"})," file:"]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-java",children:'public class ReadDataFileTest {\n    @DataProvider\n    public Iterator<Object[]> getTestUsers() {\n        final TestUsers testUsers = DataMapper.parse(TestUsers.class);\n        final List<Object[]> data = new ArrayList<>();\n        testUsers.getUsers()\n                .forEach(user -> data.add(new Object[]{user}));\n        return data.iterator();\n    }\n\n    @Test(dataProvider = "getTestUsers")\n    public void jsonTest(User user) {\n        Assert.assertFalse(user.getUsername().isBlank());\n        System.out.println("Username[" + user.getUsername() + "] Password[" + user.getPassword() + "]");\n    }\n\n    @Data\n    @DataFile\n    static class TestUsers {\n        List<User> users;\n    }\n\n    @Data\n    static class User {\n        private String username;\n        private String password;\n\n    }\n}\n'})}),"\n",(0,n.jsx)(a.h3,{id:"update-data-files",children:"Update data files"}),"\n",(0,n.jsxs)(a.p,{children:["In addition to reading data files, DataMapper can also update them. Let's take a look at how to do this with a YAML\nfile, ",(0,n.jsx)(a.code,{children:"test_sample.yml"}),"."]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-yaml",children:'users:\n  user1:\n    username: "Ramesh"\n    password: "4177472e-23a3-4426-893f-8a794af7189c"\n  user2:\n    username: "Babu"\n    password: "40aafad2-1d24-4d6c-85e2-b7630dc17c57"\n'})}),"\n",(0,n.jsxs)(a.p,{children:["First, we define the POJO class with ",(0,n.jsx)(a.code,{children:"@DataFile"})," annotation."]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-java",children:'\n@Data\n@DataFile(fileName = "test_sample.yml")\nstatic class TestSample {\n    Map<String, Map<String, String>> users;\n}\n'})}),"\n",(0,n.jsx)(a.p,{children:"To update the values in the test_sample.yml file, we first read the file into a TestSample object:"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-java",children:"UUID uuid = UUID.randomUUID();\nTestSample testSample = DataMapper.parse(TestSample.class);\n"})}),"\n",(0,n.jsx)(a.p,{children:'We can then modify the values in the TestSample object as desired. For example, let\'s update the password for "user1" to\na new UUID:'}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-java",children:'testSample.getUsers().\n\nget("user1").\n\nput("password",uuid.toString());\n'})}),"\n",(0,n.jsxs)(a.p,{children:["Finally, we can write the updated TestSample object back to the ",(0,n.jsx)(a.code,{children:"test_sample.yml"})," file:"]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-java",children:"DataMapper.write(testSample);\n"})}),"\n",(0,n.jsxs)(a.p,{children:["Here is the complete example code for updating and writing to the ",(0,n.jsx)(a.code,{children:"test_sample.yml"})," file:"]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-java",children:'public class UpdateDataFileTest {\n    @SneakyThrows\n    @Test\n    public void testClass() {\n        UUID uuid = UUID.randomUUID();\n        TestSample testSample = DataMapper.parse(TestSample.class);\n        testSample.getUsers().get("user1").put("password", uuid.toString());\n        DataMapper.write(testSample);\n    }\n\n    @Data\n    @DataFile(fileName = "test_sample.yml")\n    static class TestSample {\n        Map<String, Map<String, String>> users;\n    }\n}\n'})}),"\n",(0,n.jsx)(a.h3,{id:"write-data-files",children:"Write data files"}),"\n",(0,n.jsxs)(a.p,{children:["We'll use DataMapper to write a ",(0,n.jsx)(a.code,{children:"Customer"})," object to a data file. If the file doesn't exist, it will create a new one."]}),"\n",(0,n.jsxs)(a.p,{children:["Let's create ",(0,n.jsx)(a.code,{children:"Customer"})," POJO class"]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-java",children:'\n@Data\n@DataFile(fileName = "customer.yml")\nstatic class Customer {\n    String firstName;\n    String lastName;\n    int age;\n    List<Details> contactDetails;\n}\n\n@Data\nstatic class Details {\n    String type;\n    String number;\n}\n'})}),"\n",(0,n.jsx)(a.p,{children:"Next, let's create a Customer object:"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-java",children:'Details details1 = new Details();\ndetails1.setNumber("512");\ndetails1.setType("CSM");\n\nDetails details2 = new Details();\ndetails2.setNumber("123");\ndetails2.setType("A-CSM");\n\nCustomer customer = new Customer();\ncustomer.setAge(5);\ncustomer.setFirstName("Mark");\ncustomer.setLastName("Jones");\ncustomer.setContactDetails(List.of(details1, details2));\n'})}),"\n",(0,n.jsxs)(a.p,{children:["Now, let's use the ",(0,n.jsx)(a.code,{children:"write"})," method to write the Customer to a YAML file:"]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-java",children:"DataMapper.write(customer);\n"})}),"\n",(0,n.jsxs)(a.p,{children:["The resulting ",(0,n.jsx)(a.code,{children:"customer.yml"})," file will look like this:"]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-yaml",children:'firstName: "Mark"\nlastName: "Jones"\nage: 5\ncontactDetails:\n  - type: "CSM"\n    number: "512"\n  - type: "A-CSM"\n    number: "123"\n'})}),"\n",(0,n.jsx)(a.p,{children:"Here is a full example code to create data file."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-java",children:'public class CreateDataFileTest {\n\n    @Test\n    public void createDataFileTest() {\n        Details details1 = new Details();\n        details1.setNumber("512");\n        details1.setType("CSM");\n\n        Details details2 = new Details();\n        details2.setNumber("123");\n        details2.setType("A-CSM");\n\n        Customer customer = new Customer();\n        customer.setAge(5);\n        customer.setFirstName("Mark");\n        customer.setLastName("Jones");\n        customer.setContactDetails(List.of(details1, details2));\n\n        DataMapper.write(customer);\n\n        Customer newCustomer = DataMapper.parse(Customer.class);\n        newCustomer.getContactDetails().forEach(details -> System.out.println(details.getType() + " : " + details.getNumber()));\n    }\n\n    @Data\n    @DataFile(fileName = "customer.yml")\n    static class Customer {\n        String firstName;\n        String lastName;\n        int age;\n        List<Details> contactDetails;\n    }\n\n    @Data\n    static class Details {\n        String type;\n        String number;\n    }\n\n}\n'})})]})}function p(e={}){const{wrapper:a}={...(0,r.R)(),...e.components};return a?(0,n.jsx)(a,{...e,children:(0,n.jsx)(o,{...e})}):o(e)}},8453:(e,a,s)=>{s.d(a,{R:()=>i,x:()=>l});var t=s(6540);const n={},r=t.createContext(n);function i(e){const a=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function l(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),t.createElement(r.Provider,{value:a},e.children)}}}]);