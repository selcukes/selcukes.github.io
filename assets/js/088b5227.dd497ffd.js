"use strict";(self.webpackChunkSelcukes=self.webpackChunkSelcukes||[]).push([[269],{1980:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>r,default:()=>p,frontMatter:()=>l,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"data-bind/excel-mapper","title":"ExcelMapper","description":"ExcelMapper is a Java utility class that facilitates the parsing and writing of Excel files (.xlsx). It is designed to","source":"@site/docs/07_data-bind/excel-mapper.md","sourceDirName":"07_data-bind","slug":"/data-bind/excel-mapper","permalink":"/docs/data-bind/excel-mapper","draft":false,"unlisted":false,"editUrl":"https://github.com/selcukes/selcukes.github.io/tree/main/docs/07_data-bind/excel-mapper.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"id":"excel-mapper","title":"ExcelMapper","sidebar_position":3},"sidebar":"defaultSidebar","previous":{"title":"DataMapper","permalink":"/docs/data-bind/data-mapper"},"next":{"title":"PropertiesMapper","permalink":"/docs/data-bind/properties-mapper"}}');var s=a(4848),i=a(8453);const l={id:"excel-mapper",title:"ExcelMapper",sidebar_position:3},r=void 0,o={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Parsing Excel Files",id:"parsing-excel-files",level:2},{value:"Converter",id:"converter",level:3},{value:"Substitutor",id:"substitutor",level:3},{value:"Writing to Excel Files",id:"writing-to-excel-files",level:2}];function d(e){const t={admonition:"admonition",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.p,{children:"ExcelMapper is a Java utility class that facilitates the parsing and writing of Excel files (.xlsx). It is designed to\nparse Excel sheets into streams of entity class objects and provides methods for reading and writing DataTables to Excel\nfiles."}),"\n",(0,s.jsx)(t.h2,{id:"introduction",children:"Introduction"}),"\n",(0,s.jsx)(t.p,{children:"The ExcelMapper class is designed to simplify the process of reading and writing Excel files. It provides methods for\nparsing Excel sheets into streams of entity class objects and for creating DataTables from Excel sheets. Additionally,\nit offers functionality to write DataTables to specified sheets in Excel files."}),"\n",(0,s.jsx)(t.h2,{id:"parsing-excel-files",children:"Parsing Excel Files"}),"\n",(0,s.jsx)(t.p,{children:"Parsing Entity Class"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:"Class<MyEntity> entityClass = MyEntity.class;\nStream<MyEntity> entityStream = ExcelMapper.parse(entityClass);\n"})}),"\n",(0,s.jsx)(t.p,{children:"Parsing Sheets into DataTables"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:'String filePath = "path/to/your/excel/file.xlsx";\nMap<String, DataTable<String, String>> sheetData = ExcelMapper.parse(filePath);\n'})}),"\n",(0,s.jsx)(t.p,{children:"Here is an example usage of reading an Excel sheet."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:'public class ReadExcelTest {\n    @Data\n    @DataFile(fileName = "TestData.xlsx", sheetName = "Yahoo")\n    static class TestData {\n        @Key(name = "First Name")\n        String firstName;\n        @Key(name = "Last Name")\n        String lastName;\n        @Key(name = "DOB", format = "MM-dd-yyyy")\n        LocalDate dob;\n        String location;\n\n    }\n\n    @Test\n    public void excelMapperTest() {\n        Stream<TestData> dataStream = ExcelMapper.parse(TestData.class);\n        dataStream.forEach(System.out::println);\n    }\n}\n'})}),"\n",(0,s.jsxs)(t.p,{children:["In the above example, We have provided Excel file name and sheet name as input in ",(0,s.jsx)(t.code,{children:"@DataFile"})," annotation."]}),"\n",(0,s.jsxs)(t.p,{children:["As explained in the ",(0,s.jsx)(t.code,{children:"DataMapper"})," section, the fileName attribute is optional - by default, ExcelMapper will look for a\ndatafile name as the SnakeCase of the entity class name followed by xlsx as a suffix. The sheetName attribute is also\noptional. By default, the first sheet name in the Excel file is used."]}),"\n",(0,s.jsxs)(t.p,{children:["To map fields, you can use ",(0,s.jsx)(t.code,{children:"@Key"})," annotation."]}),"\n",(0,s.jsx)(t.h3,{id:"converter",children:"Converter"}),"\n",(0,s.jsx)(t.p,{children:"ExcelMapper provides way to convert field values with custom converter."}),"\n",(0,s.jsxs)(t.p,{children:["To use custom converter, you should specify its class via ",(0,s.jsx)(t.code,{children:"@Key"})," annotation."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:'\n@Key(name = "Tags", converter = ListOfStringConverter.class)\nprivate List<String> data;\n'})}),"\n",(0,s.jsx)(t.p,{children:"And the actual implementation may look like the following:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:'public class ListOfStringConverter extends DefaultConverter<List<String>> {\n    @Override\n    public List<String> convert(final String value) {\n        return asList(value.split(","));\n    }\n}\n'})}),"\n",(0,s.jsxs)(t.p,{children:["Custom converters must extend ",(0,s.jsx)(t.code,{children:"DefaultConverter"})," class.\nAlso note that by default ",(0,s.jsx)(t.code,{children:"ExcelMapper"})," uses an implicit conversion based on the field type.\nSo you don't have to explicitly specify a converter if it's among the defaults."]}),"\n",(0,s.jsx)(t.h3,{id:"substitutor",children:"Substitutor"}),"\n",(0,s.jsxs)(t.p,{children:["Similar to converters, ",(0,s.jsx)(t.code,{children:"ExcelMapper"})," allows you to substitute field value prior to parsing an Excel sheet"]}),"\n",(0,s.jsxs)(t.p,{children:["Consider, we have given Excel field values as ",(0,s.jsx)(t.code,{children:"${DATE}"})," in Excel file. On the fly, this field value will be converted to\nthe current date and ensure the value assigned to the respective field."]}),"\n",(0,s.jsxs)(t.p,{children:["This can be achieved with the help of ",(0,s.jsx)(t.code,{children:"@Interpolate"})," annotation."]}),"\n",(0,s.jsx)(t.p,{children:"ExcelMapper allows you to use custom substitutor."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:"public class FakerDataSubstitutor extends DefaultSubstitutor {\n    @Override\n    public String replace(String strToReplace, final String format) {\n\n        return FakerUtils.substitute(strToReplace);\n    }\n}\n"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:'public class ReadExcelTest {\n    @Interpolate(substitutor = FakerDataSubstitutor.class)\n    @Data\n    @DataFile(fileName = "TestData.xlsx", sheetName = "Yahoo")\n    static class TestData {\n        @Key(name = "First Name")\n        String firstName;\n        @Key(name = "Last Name")\n        String lastName;\n        @Key(name = "DOB", format = "MM-dd-yyyy")\n        LocalDate dob;\n        String location;\n\n    }\n\n    @Test\n    public void interpolateExcelMapperTest() {\n        Stream<TestData> dataStream = ExcelMapper.parse(TestData.class);\n        dataStream.forEach(System.out::println);\n    }\n}\n'})}),"\n",(0,s.jsx)(t.h2,{id:"writing-to-excel-files",children:"Writing to Excel Files"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:' @Test\npublic void excelWrite() {\n    DataTable<String, Object> input = DataTable.of(\n            new LinkedHashMap<>(Map.of("ID", 1, "Name", "John Doe", "Age", 30, "IsEmployed", false)),\n            new LinkedHashMap<>(Map.of("ID", 2, "Name", "Jane Smith", "Age", 40, "IsEmployed", false)),\n            new LinkedHashMap<>(Map.of("ID", 3, "Name", "Tom", "Age", 35, "IsEmployed", false)));\n\n    String filePath = Resources.ofTest("output.xlsx").toString();\n    String sheetName = "Sheet1";\n    ExcelMapper.write(input, filePath, sheetName);\n}\n'})}),"\n",(0,s.jsx)(t.admonition,{type:"note",children:(0,s.jsx)(t.p,{children:"In case of errors during file parsing or writing, a DataMapperException is thrown. This exception provides information\nabout the failure, including the underlying cause."})})]})}function p(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,t,a)=>{a.d(t,{R:()=>l,x:()=>r});var n=a(6540);const s={},i=n.createContext(s);function l(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);