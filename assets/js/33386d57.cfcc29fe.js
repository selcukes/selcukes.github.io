"use strict";(self.webpackChunkSelcukes=self.webpackChunkSelcukes||[]).push([[7642],{2060:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>i,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"collections/data-table","title":"DataTable","description":"The DataTable class is a generic data table that stores data in rows and columns. It is implemented as a list of maps where each map represents a row in the table, and the keys of the maps represent the column names","source":"@site/docs/04_collections/data-table.md","sourceDirName":"04_collections","slug":"/collections/data-table","permalink":"/docs/collections/data-table","draft":false,"unlisted":false,"editUrl":"https://github.com/selcukes/selcukes.github.io/tree/main/docs/04_collections/data-table.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"id":"data-table","title":"DataTable","sidebar_position":1},"sidebar":"defaultSidebar","previous":{"title":"WebDriver Binaries","permalink":"/docs/guides/webdriver-binaries"},"next":{"title":"DataComparator","permalink":"/docs/collections/data-comparator"}}');var l=n(4848),o=n(8453);const s={id:"data-table",title:"DataTable",sidebar_position:1},r=void 0,i={},d=[{value:"Creating a DataTable",id:"creating-a-datatable",level:3},{value:"Adding Rows",id:"adding-rows",level:3},{value:"Retrieving Column Keys",id:"retrieving-column-keys",level:3},{value:"Retrieving Column Entries",id:"retrieving-column-entries",level:3},{value:"Filtering Rows",id:"filtering-rows",level:3},{value:"Finding Rows",id:"finding-rows",level:3},{value:"Grouping Rows",id:"grouping-rows",level:3},{value:"Updating Rows",id:"updating-rows",level:3},{value:"Updating Cell",id:"updating-cell",level:3},{value:"Removing Rows",id:"removing-rows",level:3},{value:"Adding a Column",id:"adding-a-column",level:3},{value:"Rename Column",id:"rename-column",level:3},{value:"Selecting Columns",id:"selecting-columns",level:3},{value:"Selecting Rows",id:"selecting-rows",level:3},{value:"Join Tables",id:"join-tables",level:3},{value:"Aggregate by Column",id:"aggregate-by-column",level:3},{value:"Sort by Column",id:"sort-by-column",level:3},{value:"Contains",id:"contains",level:3},{value:"Other Operations",id:"other-operations",level:3}];function c(e){const a={code:"code",h3:"h3",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsxs)(a.p,{children:["The ",(0,l.jsx)(a.code,{children:"DataTable"})," class is a generic data table that stores data in rows and columns. It is implemented as a list of maps where each map represents a row in the table, and the keys of the maps represent the column names"]}),"\n",(0,l.jsx)(a.h3,{id:"creating-a-datatable",children:"Creating a DataTable"}),"\n",(0,l.jsxs)(a.p,{children:["To create an instance of ",(0,l.jsx)(a.code,{children:"DataTable"}),", you can use the following code:"]}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-java",children:"DataTable<String, String> dataTable = new DataTable<>();\n"})}),"\n",(0,l.jsx)(a.p,{children:"To create a DataTable with initial data, you can use the of method and pass a list of maps, where each map represents a row of data with the keys being the column names and the values being the data for that row:"}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-java",children:'DataTable<String, Object> dataTable = DataTable.of(\nMap.of("name", "Alice", "age", 25),\nMap.of("name", "Bob", "age", 30),\nMap.of("name", "Charlie", "age", 35));\n'})}),"\n",(0,l.jsx)(a.h3,{id:"adding-rows",children:"Adding Rows"}),"\n",(0,l.jsxs)(a.p,{children:["To add a new row to the data table, use the ",(0,l.jsx)(a.code,{children:"addRow"})," method:"]}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-java",children:'Map<String, String> row = Map.of("Key1", "Value1","Key2", "Value2");\ndataTable.addRow(row);\n'})}),"\n",(0,l.jsxs)(a.p,{children:["You can also add multiple rows at once using the ",(0,l.jsx)(a.code,{children:"addRows"})," method:"]}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-java",children:'List<Map<String, String>> rows = List.of(\nMap.of("Key1", "Value1","Key2", "Value2"),\nMap.of("Key3", "Value3","Key4", "Value4"));\n\ndataTable.addRows(rows);\n\n'})}),"\n",(0,l.jsx)(a.h3,{id:"retrieving-column-keys",children:"Retrieving Column Keys"}),"\n",(0,l.jsxs)(a.p,{children:["To retrieve a list of column keys from the first row of the data table, use the ",(0,l.jsx)(a.code,{children:"getColumns"})," method:"]}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-java",children:"List<String> columns = dataTable.getColumns();\n"})}),"\n",(0,l.jsx)(a.h3,{id:"retrieving-column-entries",children:"Retrieving Column Entries"}),"\n",(0,l.jsx)(a.p,{children:"The getColumnEntries method in the DataTable class allows you to retrieve a list of all the values in a given column of the table."}),"\n",(0,l.jsx)(a.p,{children:"Here is an example usage of the getColumnEntries method:"}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-java",children:'DataTable<String, Object> dataTable = DataTable.of(\nMap.of("name", "Alice", "age", 25),\nMap.of("name", "Bob", "age", 30),\nMap.of("name", "Charlie", "age", 35));\n\nList<Integer> ages = dataTable.getColumnEntries("age");\n'})}),"\n",(0,l.jsx)(a.p,{children:"This will produce the following output:"}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-css",children:"[25, 30, 35]\n"})}),"\n",(0,l.jsx)(a.h3,{id:"filtering-rows",children:"Filtering Rows"}),"\n",(0,l.jsxs)(a.p,{children:["To filter the rows of the DataTable based on a predicate, use the ",(0,l.jsx)(a.code,{children:"filter"})," method:"]}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-java",children:'Stream<Map<String, String>> filteredRows = dataTable.filter(row -> row.get("Key1").equals("Value1"));\n'})}),"\n",(0,l.jsx)(a.h3,{id:"finding-rows",children:"Finding Rows"}),"\n",(0,l.jsxs)(a.p,{children:["To find the first or last row that matches a predicate, use the ",(0,l.jsx)(a.code,{children:"findFirst"})," and ",(0,l.jsx)(a.code,{children:"findLast"})," methods:"]}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-java",children:'Optional<Map<String, String>> firstMatch = dataTable.findFirst(row -> row.get("Key1").equals("Value1"));\nOptional<Map<String, String>> lastMatch = dataTable.findLast(row -> row.get("Key1").equals("Value1"));\n'})}),"\n",(0,l.jsx)(a.h3,{id:"grouping-rows",children:"Grouping Rows"}),"\n",(0,l.jsxs)(a.p,{children:["To group the rows of the DataTable based on the values of a column key, use the ",(0,l.jsx)(a.code,{children:"groupByColumn"})," method:"]}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-java",children:'DataTable<String, String> dataTable = DataTable.of(\nMap.of("Key1", "A", "Key2", "X", "Value", "10"),\nMap.of("Key1", "A", "Key2", "Y", "Value", "20"),\nMap.of("Key1", "B", "Key2", "X", "Value", "30"),\nMap.of("Key1", "B", "Key2", "Y", "Value", "40"));\n\nMap<String, DataTable<String, String>> groupedRows = dataTable.groupByColumn("Key1");\n'})}),"\n",(0,l.jsx)(a.p,{children:"This will produce a Map of DataTable with the following data:"}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-css",children:"A{\n[Value, Key2, Key1]\n[10, X, A]\n[20, Y, A]\n}\nB{\n[Value, Key2, Key1]\n[30, X, B]\n[40, Y, B]\n}\n"})}),"\n",(0,l.jsx)(a.p,{children:'In this example, we grouped the rows of dataTable by the values in the "Key1" column, which resulted in a map where each key corresponds to a unique value in the "Key1" column, and each value is a new DataTable containing the rows with that key.'}),"\n",(0,l.jsx)(a.h3,{id:"updating-rows",children:"Updating Rows"}),"\n",(0,l.jsxs)(a.p,{children:["To update each row in the table by applying a function to the map representing each row, use the ",(0,l.jsx)(a.code,{children:"updateRows"})," method:"]}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-java",children:'dataTable.updateRows(row -> {\n        row.put("Key3", "Value3");\n        return row;\n        });\n'})}),"\n",(0,l.jsx)(a.p,{children:'This will update the value for the "Key3" column in each row of the table. The function passed to updateRows takes a Map as input, which represents a single row of the table. In this example, the function adds a new key-value pair to each row and returns the updated row.'}),"\n",(0,l.jsx)(a.h3,{id:"updating-cell",children:"Updating Cell"}),"\n",(0,l.jsx)(a.p,{children:"To update a cell at the given row index and column key in a DataTable, use the updateCell method:"}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-java",children:' dataTable.updateCell(rowIndex, "Key", "newValue");\n'})}),"\n",(0,l.jsx)(a.p,{children:"This will update the cell at the specified row index and column key with the new value."}),"\n",(0,l.jsx)(a.h3,{id:"removing-rows",children:"Removing Rows"}),"\n",(0,l.jsx)(a.p,{children:"To remove rows from the DataTable based on a given condition, use the removeRows method. The method takes a Predicate as input, which is used to filter the rows to remove."}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-java",children:'// Create a sample DataTable\nDataTable<String, Integer> dataTable = DataTable.of(\nMap.of("category", 1, "price", 10),\nMap.of("category", 2, "price", 20),\nMap.of("category", 1, "price", 30),\nMap.of("category", 2, "price", 40)\n);\n\n// Define the predicate to filter rows\nPredicate<Map<String, Integer>> predicate = row -> row.get("category") == 1;\n\n// Remove the rows matching the predicate\ndataTable.removeRows(predicate);\n'})}),"\n",(0,l.jsx)(a.p,{children:"To remove a specific row from the DataTable using its index, use the removeRow method."}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-java",children:'// Create a sample DataTable\nDataTable<String, Object> dataTable = DataTable.of(\n        Map.of("name", "Alice", "age", "25"),\n        Map.of("name", "Bob", "age", "30"),\n        Map.of("name", "Charlie", "age", "35")\n        );\n\n// Remove the row at index 1\n        dataTable.removeRow(1);\n'})}),"\n",(0,l.jsx)(a.h3,{id:"adding-a-column",children:"Adding a Column"}),"\n",(0,l.jsxs)(a.p,{children:["To add a new column to the table with the given key and defaultValue, use the ",(0,l.jsx)(a.code,{children:"addColumn"})," method:"]}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-java",children:'dataTable.addColumn("Key", "Value");\n'})}),"\n",(0,l.jsxs)(a.p,{children:["Suppose we have a ",(0,l.jsx)(a.code,{children:"DataTable"})," with the following data:"]}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-java",children:'DataTable<String, Integer> dataTable = DataTable.of(\nMap.of("category", 1, "price", 10),\nMap.of("category", 2, "price", 20),\nMap.of("category", 1, "price", 30),\nMap.of("category", 2, "price", 40));\n'})}),"\n",(0,l.jsxs)(a.p,{children:["To add Column ",(0,l.jsx)(a.code,{children:"Code"})," with default ",(0,l.jsx)(a.code,{children:"1234"})," then  we can use the addColumn() method as follows:"]}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-java",children:'dataTable.addColumn("Code", 1234);\n'})}),"\n",(0,l.jsx)(a.p,{children:"This will update a DataTable with the following data:"}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-css",children:"[price, category, Code]\n[10, 1, 1234]\n[20, 2, 1234]\n[30, 1, 1234]\n[40, 2, 1234]\n"})}),"\n",(0,l.jsx)(a.h3,{id:"rename-column",children:"Rename Column"}),"\n",(0,l.jsx)(a.p,{children:"To update the column names in a DataTable using the mapping specified in the columnMapping parameter, use the renameColumn method:"}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-java",children:'Map<String, String> columnMapping = Map.of("Key1", "NewKey1", "Key2", "NewKey2");\ndataTable.renameColumn(columnMapping);\n'})}),"\n",(0,l.jsx)(a.p,{children:"This will update the column names in the dataTable according to the mapping specified in columnMapping."}),"\n",(0,l.jsx)(a.h3,{id:"selecting-columns",children:"Selecting Columns"}),"\n",(0,l.jsx)(a.p,{children:'The selectColumns method in the DataTable class allows you to return a new DataTable with only the selected columns. For example, if you have a DataTable with columns "A", "B", and "C", and you want to select only columns "A" and "C", you can use this method as follows:'}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-java",children:'DataTable<String, String> dataTable = DataTable.of(\nMap.of("A", "a1", "B", "b1", "C", "c1"),\nMap.of("A", "a2", "B", "b2", "C", "c2"));\n\nList<String> columns = Arrays.asList("A", "C");\n\nDataTable<String, String> selectedColumns = dataTable.selectColumns(columns);\n'})}),"\n",(0,l.jsx)(a.p,{children:'This will produce a new DataTable with only columns "A" and "C":'}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-css",children:"[A, C]\n[a1, c1]\n[a2, c2]\n"})}),"\n",(0,l.jsx)(a.h3,{id:"selecting-rows",children:"Selecting Rows"}),"\n",(0,l.jsx)(a.p,{children:"The selectRows method allows you to return a new DataTable instance that contains only the rows that satisfy the given predicate. For example, if you have a DataTable with the following data:"}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-java",children:'DataTable<String, Integer> dataTable = DataTable.of(\nMap.of("A", 1, "B", 2, "C", 3),\nMap.of("A", 4, "B", 5, "C", 6),\nMap.of("A", 7, "B", 8, "C", 9));\n'})}),"\n",(0,l.jsx)(a.p,{children:'And you want to select only the rows where the value in column "A" is greater than 3, you can use this method as follows:'}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-java",children:'DataTable<String, Integer> selectedRows = dataTable.selectRows(row -> row.get("A") > 3);\n'})}),"\n",(0,l.jsx)(a.p,{children:'This will produce a new DataTable with only the rows where the value in column "A" is greater than 3:'}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-css",children:"[A, B, C]\n[4, 5, 6]\n[7, 8, 9]\n"})}),"\n",(0,l.jsx)(a.h3,{id:"join-tables",children:"Join Tables"}),"\n",(0,l.jsxs)(a.p,{children:["The ",(0,l.jsx)(a.code,{children:"join"})," method is used to merge two DataTables based on a common column. Here's an example of how to use it:"]}),"\n",(0,l.jsxs)(a.p,{children:["Suppose we have two ",(0,l.jsx)(a.code,{children:"DataTables"}),", table1 and table2, with the following data:"]}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-java",children:'DataTable<String, Object> table1 = DataTable.of(\nMap.of("name", "Alice", "age", 25),\nMap.of("name", "Bob", "age", 30),\nMap.of("name", "Charlie", "age", 35));\n\nDataTable<String, String> table2 = DataTable.of(\nMap.of("name", "Alice","gender", "F"),\nMap.of("name", "Bob","gender", "M"),\nMap.of("name", "Charlie","gender", "M"));\n'})}),"\n",(0,l.jsx)(a.p,{children:'In the example above, we have two DataTables, table1 and table2, with a common column "name". We can use the join method to merge the two tables on this column, and a lambda expression to merge the rows from both tables into a new map.'}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-java",children:'DataTable<String, Object> joinedTable = table1.join(table2, "name",\n        (row1, row2) -> {\n        var resultRow = new HashMap<String, Object>();\n        resultRow.putAll(row1);\n        resultRow.putAll(row2);\n        return resultRow;\n        });\n'})}),"\n",(0,l.jsx)(a.p,{children:'The resulting joinedTable contains the columns "name", "age", and "gender". Here\'s the data it contains:'}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-css",children:"[name, gender, age]\n[Alice, F, 25]\n[Bob, M, 30]\n[Charlie, M, 35]\n"})}),"\n",(0,l.jsx)(a.p,{children:"In summary, we can use the join method to merge two DataTables based on a common column, and a lambda expression to merge the rows from both tables into a new map. The resulting DataTable contains the merged data."}),"\n",(0,l.jsx)(a.h3,{id:"aggregate-by-column",children:"Aggregate by Column"}),"\n",(0,l.jsxs)(a.p,{children:["The ",(0,l.jsx)(a.code,{children:"aggregateByColumn"})," method in the DataTable class allows you to perform aggregation operations on one column based on the values of another column.\nSuppose we have a ",(0,l.jsx)(a.code,{children:"DataTable"})," with the following data:"]}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-java",children:'DataTable<String, Integer> dataTable = DataTable.of(\nMap.of("category", 1, "price", 10),\nMap.of("category", 2, "price", 20),\nMap.of("category", 1, "price", 30),\nMap.of("category", 2, "price", 40));\n'})}),"\n",(0,l.jsx)(a.p,{children:'To aggregate the "price" column by the "category" column using the sum() function, we can use the aggregateByColumn() method as follows:'}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-java",children:'Map<Integer, Integer> result = dataTable.aggregateByColumn("price", "category", Integer::sum);\n'})}),"\n",(0,l.jsx)(a.p,{children:"This will produce a Map with the following data:"}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-css",children:"{1=40, 2=60}\n"})}),"\n",(0,l.jsx)(a.p,{children:'In this case, the "category" column has two distinct values: 1 and 2. The "price" values for the "category" 1 are 10 and 30, which sum up to 40. Similarly, the "price" values for the "category" 2 are 20 and 40, which sum up to 60.'}),"\n",(0,l.jsx)(a.h3,{id:"sort-by-column",children:"Sort by Column"}),"\n",(0,l.jsx)(a.p,{children:"The sortByColumn method allows you to sort the rows in the DataTable by the values in a particular column. You specify which column to sort by using the columnName parameter, which should be the name of the column you want to sort by. You also specify a Comparator object to determine the order of the values in the column."}),"\n",(0,l.jsx)(a.p,{children:"For example, suppose you have a DataTable object that contains information about students, including their names and grades on an exam. You could sort the table by grade using the sortByColumn method like this:"}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-java",children:'// Create a DataTable object with student data\nDataTable<String, Object> studentTable = DataTable.of(\nMap.of("Name", "Alice", "Grade", 85),\nMap.of("Name", "Bob", "Grade", 72),\nMap.of("Name", "Charlie", "Grade", 92),\nMap.of("Name", "Dave", "Grade", 68));\n\n// Create a Comparator object to sort by grade in descending order\nComparator<Object> gradeComparator = Comparator.comparing(\n        obj -> Integer.valueOf(obj.toString()),\n        Comparator.reverseOrder()\n        );\n\n// Sort the table by grade\nstudentTable.sortByColumn("Grade", gradeComparator);\n\n'})}),"\n",(0,l.jsx)(a.p,{children:"This will sort a DataTable as follows:"}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-css",children:"[Name, Grade]\n[Charlie, 92]\n[Alice, 85]\n[Bob, 72]\n[Dave, 68]\n"})}),"\n",(0,l.jsx)(a.p,{children:'In this example, the columnName parameter is "Grade", indicating that we want to sort by the "Grade" column, and the comparator parameter is gradeComparator, which is a Comparator object that sorts integers in reverse order.'}),"\n",(0,l.jsx)(a.h3,{id:"contains",children:"Contains"}),"\n",(0,l.jsx)(a.p,{children:"To check if a DataTable contains an expected row, use the contains method:"}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-java",children:'Map<String, String> expectedRow = Map.of("Key1", "A", "Key2", "X", "Value", "10");\nboolean result = dataTable.contains(expectedRow);\n'})}),"\n",(0,l.jsx)(a.p,{children:"This will check if the dataTable contains a row with the same keys and values as expectedRow, and return true if it does, false otherwise."}),"\n",(0,l.jsx)(a.h3,{id:"other-operations",children:"Other Operations"}),"\n",(0,l.jsxs)(a.p,{children:["The DataTable class also supports other operations such as sorting, mapping, reducing, and more. These operations are performed using the Stream API, which can be accessed by calling the ",(0,l.jsx)(a.code,{children:"rows"})," method:"]}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-java",children:"Stream<Map<String, String>> stream = dataTable.rows();\n"})})]})}function h(e={}){const{wrapper:a}={...(0,o.R)(),...e.components};return a?(0,l.jsx)(a,{...e,children:(0,l.jsx)(c,{...e})}):c(e)}},8453:(e,a,n)=>{n.d(a,{R:()=>s,x:()=>r});var t=n(6540);const l={},o=t.createContext(l);function s(e){const a=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function r(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:s(e.components),t.createElement(o.Provider,{value:a},e.children)}}}]);