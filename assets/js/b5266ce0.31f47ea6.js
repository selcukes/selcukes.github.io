"use strict";(self.webpackChunkSelcukes=self.webpackChunkSelcukes||[]).push([[1202],{9514:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>c,frontMatter:()=>a,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"data-bind/properties-mapper","title":"PropertiesMapper","description":"The PropertiesMapper class provides utilities for parsing, writing, and updating property files and maps. This README","source":"@site/docs/07_data-bind/properties-mapper.md","sourceDirName":"07_data-bind","slug":"/data-bind/properties-mapper","permalink":"/docs/data-bind/properties-mapper","draft":false,"unlisted":false,"editUrl":"https://github.com/selcukes/selcukes.github.io/tree/main/docs/07_data-bind/properties-mapper.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"id":"properties-mapper","title":"PropertiesMapper","sidebar_position":4},"sidebar":"defaultSidebar","previous":{"title":"ExcelMapper","permalink":"/docs/data-bind/excel-mapper"},"next":{"title":"CsvMapper","permalink":"/docs/data-bind/csv-mapper"}}');var s=n(4848),r=n(8453);const a={id:"properties-mapper",title:"PropertiesMapper",sidebar_position:4},o=void 0,p={},l=[{value:"Introduction",id:"introduction",level:2},{value:"Parsing Properties Files",id:"parsing-properties-files",level:2},{value:"Writing to Properties Files",id:"writing-to-properties-files",level:2}];function d(e){const t={admonition:"admonition",code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.p,{children:"The PropertiesMapper class provides utilities for parsing, writing, and updating property files and maps. This README\nexplains the functionalities provided by the class."}),"\n",(0,s.jsx)(t.h2,{id:"introduction",children:"Introduction"}),"\n",(0,s.jsx)(t.p,{children:"The PropertiesMapper class simplifies the handling of property files and maps in Java. It allows you to parse properties\nfiles into entity classes or maps, write entity classes or maps to properties files, and update properties in existing\nfiles. Additionally, it provides a convenient method to access system properties and environment variables."}),"\n",(0,s.jsx)(t.h2,{id:"parsing-properties-files",children:"Parsing Properties Files"}),"\n",(0,s.jsx)(t.p,{children:"Parsing to Entity Class"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:"Class<MyEntity> entityClass = MyEntity.class;\nMyEntity entity = PropertiesMapper.parse(entityClass);\n"})}),"\n",(0,s.jsx)(t.p,{children:"Parsing to Map"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:'Path filePath = Paths.get("path/to/your/property/file.properties");\nMap<String, String> propertyMap = PropertiesMapper.parse(filePath);\n'})}),"\n",(0,s.jsxs)(t.p,{children:["In the following example, we have a ",(0,s.jsx)(t.code,{children:"test_config.properties"})," file containing some properties:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-properties",metastring:'title="test_config.properties"',children:"userName=Ramesh\npassword=make\nisTest=true\nosName=${os.name}\ndate=${date}\nhelloDate=12/12/2022\nselcukes.jim=50\nmass=jim,jil\n"})}),"\n",(0,s.jsxs)(t.p,{children:["We can then use ",(0,s.jsx)(t.code,{children:"PropertiesMapper"})," to map these properties to a TestConfig object:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:'public class PropertiesMapperTest {\n\n    @Test\n    public void testProperties() {\n        var testConfig = PropertiesMapper.parse(TestConfig.class);\n        System.out.println(testConfig.getUserName());\n        if (testConfig.isTest())\n            System.out.println(testConfig.getDate());\n        System.out.println(testConfig.getOsName());\n        System.out.println(testConfig.getJim());\n        System.out.println(testConfig.getMass());\n        System.out.println(testConfig.getHelloDate());\n\n    }\n\n    @Interpolate(substitutor = StringSubstitutor.class)\n    @DataFile\n    @Data\n    static class TestConfig {\n        String userName;\n        String password;\n        boolean isTest;\n        String osName;\n        LocalDate date;\n        @Key(name = "helloDate", format = "MM/dd/yyyy")\n        LocalDate helloDate;\n        @Key(name = "selcukes.jim")\n        int jim;\n        @Key(name = "mass", converter = ListOfStringConverter.class)\n        List<String> mass;\n    }\n\n}\n'})}),"\n",(0,s.jsx)(t.p,{children:"In this example, we have defined a TestConfig class with properties that match those defined in the\ntest_config.properties file. We have also used the @Interpolate annotation to enable property interpolation using the\nStringSubstitutor class."}),"\n",(0,s.jsx)(t.p,{children:"We can then call PropertiesMapper.parse(TestConfig.class) to parse the properties file into a TestConfig object."}),"\n",(0,s.jsx)(t.p,{children:"Note that we have also used the @Key annotation to specify the mapping between property names and class fields. We have\nalso used the @DataFile annotation to indicate that the data source is a file. Finally, we have used the @Data\nannotation to indicate that this is a data object that should be parsed by PropertiesMapper."}),"\n",(0,s.jsx)(t.h2,{id:"writing-to-properties-files",children:"Writing to Properties Files"}),"\n",(0,s.jsx)(t.p,{children:"Writing Entity to Properties File"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:"MyEntity entity = // create or obtain your entity\n        PropertiesMapper.write(entity);\n"})}),"\n",(0,s.jsx)(t.p,{children:"Writing Map to Properties File"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:'Path filePath = Paths.get("path/to/your/property/file.properties");\nMap<String, String> dataMap = // create or obtain your data map\n        PropertiesMapper.write(filePath, dataMap);\n'})}),"\n",(0,s.jsx)(t.p,{children:"Updating Properties"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:'Path filePath = Paths.get("path/to/your/property/file.properties");\nString key = "yourKey";\nString value = "yourValue";\nPropertiesMapper.updateProperty(filePath, key, value);\n'})}),"\n",(0,s.jsx)(t.p,{children:"Accessing System Properties and Environment Variables"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:"Properties systemProperties = PropertiesMapper.systemProperties();\n"})}),"\n",(0,s.jsx)(t.admonition,{type:"note",children:(0,s.jsx)(t.p,{children:"In case of errors during file parsing or writing a DataMapperException is thrown.\nThis exception provides information about the failure, including the underlying cause."})})]})}function c(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>o});var i=n(6540);const s={},r=i.createContext(s);function a(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);