"use strict";(self.webpackChunkSelcukes=self.webpackChunkSelcukes||[]).push([[6864],{6324:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>l,contentTitle:()=>r,default:()=>p,frontMatter:()=>o,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"collections/data-comparator","title":"DataComparator","description":"The DataComparator class is a versatile utility designed for efficient comparison of tables, rows, and column data,","source":"@site/docs/04_collections/data-comparator.md","sourceDirName":"04_collections","slug":"/collections/data-comparator","permalink":"/docs/collections/data-comparator","draft":false,"unlisted":false,"editUrl":"https://github.com/selcukes/selcukes.github.io/tree/main/docs/04_collections/data-comparator.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"id":"data-comparator","title":"DataComparator","sidebar_position":2},"sidebar":"defaultSidebar","previous":{"title":"DataTable","permalink":"/docs/collections/data-table"},"next":{"title":"Introduction","permalink":"/docs/data-bind/data-bind-setup"}}');var s=n(4848),i=n(8453);const o={id:"data-comparator",title:"DataComparator",sidebar_position:2},r=void 0,l={},c=[{value:"Comparing Two Tables",id:"comparing-two-tables",level:2},{value:"Custom Value Comparator",id:"custom-value-comparator",level:2},{value:"Comparing two rows",id:"comparing-two-rows",level:2},{value:"Comparing two column entries",id:"comparing-two-column-entries",level:2}];function d(e){const a={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(a.p,{children:"The DataComparator class is a versatile utility designed for efficient comparison of tables, rows, and column data,\naiding in the identification of discrepancies between expected and actual datasets."}),"\n",(0,s.jsxs)(a.p,{children:["The comparison results are captured and organized within a DataTable class. The DataTable class provides convenient\nmethods like ",(0,s.jsx)(a.code,{children:"prettyTable()"})," or ",(0,s.jsx)(a.code,{children:"prettyHtmlTable()"})," to facilitate enhanced reporting."]}),"\n",(0,s.jsx)(a.p,{children:"Here's an example of how to print the comparison results table:"}),"\n",(0,s.jsx)(a.h2,{id:"comparing-two-tables",children:"Comparing Two Tables"}),"\n",(0,s.jsx)(a.p,{children:"Let's examine the following example with two data tables:"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-java",children:'DataTable<String, String> expected = DataTable.of(\n        Map.of("id", "1", "Name", "Alice", "Amount", "120,000.00", "Type", "Credit"),\n        Map.of("id", "2", "Name", "BOB", "Amount", "132,855.97", "Type", "Debit"),\n        Map.of("id", "3", "Name", "Charlie", "Amount", "132,855.97", "Type", "Error1"),\n        Map.of("id", "4", "Name", "Dave", "Amount", "19,945,711.94", "Type", "Credit"));\nDataTable<String, String> actual = DataTable.of(\n        Map.of("id", "1", "Name", "Alice", "Amount", "120,000.00", "Type", "Credit"),\n        Map.of("id", "2", "Name", "Bob", "Amount", "132,855.97", "Type", "Debit"),\n        Map.of("id", "3", "Name", "Charlie", "Amount", "132,855.97", "Type", "Error"),\n        Map.of("id", "4", "Name", "Dave", "Amount", "19,945,711.94", "Type", "Credit"));\n'})}),"\n",(0,s.jsx)(a.p,{children:'To compare the tables using the foreign key "id":'}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-java",children:'DataTable<String, String> differences = DataComparator.create().diff(expected, actual, "id");\n'})}),"\n",(0,s.jsx)(a.p,{children:"To print the comparison results table:"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-java",children:"System.out.println(differences.prettyTable());\n"})}),"\n",(0,s.jsx)(a.p,{children:"The output will be:"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-shell",children:"+--------+---------------+---------------+--------+\n| Field  | Expected      | Actual        | Status |\n+--------+---------------+---------------+--------+\n| Type   | Credit        | Credit        | Pass   |\n| Amount | 120,000.00    | 120,000.00    | Pass   |\n| Name   | Alice         | Alice         | Pass   |\n| id     | 1             | 1             | Pass   |\n| Type   | Debit         | Debit         | Pass   |\n| Amount | 132,855.97    | 132,855.97    | Pass   |\n| Name   | BOB           | Bob           | Fail   |\n| id     | 2             | 2             | Pass   |\n| Type   | Error1        | Error         | Fail   |\n| Amount | 132,855.97    | 132,855.97    | Pass   |\n| Name   | Charlie       | Charlie       | Pass   |\n| id     | 3             | 3             | Pass   |\n| Type   | Credit        | Credit        | Pass   |\n| Amount | 19,945,711.94 | 19,945,711.94 | Pass   |\n| Name   | Dave          | Dave          | Pass   |\n| id     | 4             | 4             | Pass   |\n+--------+---------------+---------------+--------+\n"})}),"\n",(0,s.jsx)(a.p,{children:"This comprehensive display of differences streamlines the identification and resolution of discrepancies, enhancing the\noverall data validation process."}),"\n",(0,s.jsx)(a.h2,{id:"custom-value-comparator",children:"Custom Value Comparator"}),"\n",(0,s.jsxs)(a.p,{children:["The ",(0,s.jsx)(a.code,{children:"DataComparator"})," class provides flexibility by supporting custom comparison logic, enabling you to tailor\ncomparisons based on specific\ncriteria. This includes options such as case-insensitive comparisons or other custom-defined criteria."]}),"\n",(0,s.jsx)(a.p,{children:"Below is an illustrative example in a test scenario utilizing a custom value comparator"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-java",children:"var comparator = DataComparator.create(\n        (expectedValue, actualValue) -> expectedValue.toString().equalsIgnoreCase(actualValue.toString()));\n"})}),"\n",(0,s.jsx)(a.p,{children:"In the above snippet, a DataComparator instance is crafted to disregard case sensitivity during comparisons."}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-java",children:'DataTable<String, String> differences = comparator.diff(expected, actual, "id");\n'})}),"\n",(0,s.jsx)(a.p,{children:"To print the comparison results table:"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-java",children:"System.out.println(differences.prettyTable());\n"})}),"\n",(0,s.jsx)(a.p,{children:"The output will be:"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-shell",children:"+--------+---------------+---------------+--------+\n| Field  | Expected      | Actual        | Status |\n+--------+---------------+---------------+--------+\n| Type   | Credit        | Credit        | Pass   |\n| Amount | 120,000.00    | 120,000.00    | Pass   |\n| Name   | Alice         | Alice         | Pass   |\n| id     | 1             | 1             | Pass   |\n| Type   | Debit         | Debit         | Pass   |\n| Amount | 132,855.97    | 132,855.97    | Pass   |\n| Name   | BOB           | Bob           | Pass   |\n| id     | 2             | 2             | Pass   |\n| Type   | Error1        | Error         | Fail   |\n| Amount | 132,855.97    | 132,855.97    | Pass   |\n| Name   | Charlie       | Charlie       | Pass   |\n| id     | 3             | 3             | Pass   |\n| Type   | Credit        | Credit        | Pass   |\n| Amount | 19,945,711.94 | 19,945,711.94 | Pass   |\n| Name   | Dave          | Dave          | Pass   |\n| id     | 4             | 4             | Pass   |\n+--------+---------------+---------------+--------+\n"})}),"\n",(0,s.jsx)(a.p,{children:'Note the entry marked with "Pass":'}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-java",children:"|Name   |BOB           |Bob           |Pass   |\n"})}),"\n",(0,s.jsx)(a.p,{children:"This effectively demonstrates the successful comparison while considering the specified custom criteria, in this\ninstance, ignoring case sensitivity."}),"\n",(0,s.jsx)(a.h2,{id:"comparing-two-rows",children:"Comparing two rows"}),"\n",(0,s.jsx)(a.p,{children:"Comparing two rows follows a similar process to comparing two tables. Here's an example to demonstrate the comparison of\ntwo rows:"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-java",children:'\n@Test\npublic void testCheckRowData() {\n    var expectedRow = Map.of("id", "1", "Name", "Alice", "Amount", "120,000.00", "Type", "Credit");\n    var actualRow = Map.of("id", "1", "Name", "Bob", "Amount", "120,000.00", "Type", "Credit");\n\n    var differences = DataComparator.create().diff(expectedRow, actualRow);\n    assertTrue(isFailed(differences));\n    System.out.println(differences.prettyTable());\n}\n'})}),"\n",(0,s.jsx)(a.p,{children:"Output will be:"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-shell",children:"+--------+------------+------------+--------+\n| Field  | Expected   | Actual     | Status |\n+--------+------------+------------+--------+\n| Name   | Alice      | Bob        | Fail   |\n| id     | 1          | 1          | Pass   |\n| Type   | Credit     | Credit     | Pass   |\n| Amount | 120,000.00 | 120,000.00 | Pass   |\n+--------+------------+------------+--------+\n"})}),"\n",(0,s.jsx)(a.h2,{id:"comparing-two-column-entries",children:"Comparing two column entries"}),"\n",(0,s.jsx)(a.p,{children:"To compare entries in two columns, you can utilize the DataComparator class as demonstrated in the following example:"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-java",children:'\n@Test\npublic void testCheckColumnData() {\n    var expectedColumn = expected.getColumnEntries("Name");\n    var actualColumn = actual.getColumnEntries("Name");\n\n    var differences = DataComparator.create().diff(expectedColumn, actualColumn);\n    System.out.println(differences.prettyTable());\n}\n'})}),"\n",(0,s.jsx)(a.p,{children:"Output will be:"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-shell",children:"+-------+----------+---------+--------+\n| Field | Expected | Actual  | Status |\n+-------+----------+---------+--------+\n| Row 0 | Alice    | Alice   | Pass   |\n| Row 1 | Bob      | Bob     | Pass   |\n| Row 2 | Charlie  | Charlie | Pass   |\n| Row 3 | Dave     | Dave    | Pass   |\n+-------+----------+---------+--------+\n"})}),"\n",(0,s.jsx)(a.p,{children:'In this example, the test compares entries in the "Name" column between the expected and actual datasets. The resulting\ntable provides a clear overview of the comparison, indicating the status of each entry. In this specific case, all\nentries match, as evidenced by the "Pass" status. This detailed table assists in efficiently validating and confirming\nthe consistency of column data.'})]})}function p(e={}){const{wrapper:a}={...(0,i.R)(),...e.components};return a?(0,s.jsx)(a,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,a,n)=>{n.d(a,{R:()=>o,x:()=>r});var t=n(6540);const s={},i=t.createContext(s);function o(e){const a=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function r(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(i.Provider,{value:a},e.children)}}}]);